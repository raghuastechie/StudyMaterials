cli; httpMethods; api routing; res-types; dbConnection-Connect;
-------------------------------------------------------------------------------------------
npm init -yes; npm i mongoose; npm i express; npm i -g nodemon; npm start || nodemon index.js;
npm install jsonwebtoken --save; npm install -save cors; app.use(express.json());

const express = require("express");  
const app = express();
const port = process.env.PORT || 3000;
const api = require('./api');
app.use('/api', api);
app.use(express.json());
app.use(cors());

app.get('/', (req, res) => res.send('Hi Node Express'));
app.get('/api/courses', (req, res) => res.send(["Ravi", "Raghu", "Raju"]));

app.listen(3000, () => console.log("Listening on port: 3000"));

res.setHeader('Access-Control-Allow-Origin', 'http://localhost:4200');
app.use(cors({
    origin: 'http://localhost:4200',
    methods: ['GET', 'DELETE', 'PUT', 'POST']
}));

res.json(products); 
>> req.params.id || req.params.test
>> req.body	||	req.body.email
>> req.query

‘../’ => one step back 
‘/’ => root 
‘./’ => base directory



Session Storage/Local Storage:
------------------------------
localStorage.setItem('key', 'Value');
sessionStorage.setItem('key', 'Value');
localStorage.getItem('key');
sessionStorage.getItem('key');
sessionStorage.removeItem('key');
sessionStorage.clear();

Headers: content-type - application/json;


Videos:
Authentication: https://www.youtube.com/watch?v=Ud5xKCYQTjM
Authorization:  https://www.youtube.com/watch?v=mbsmsi7l3r4&t=293s

*Generating Token:
------------------
const jwt = require('jsonwebtoken');
let payload = {subject: usr._id};
let token = jwt.sign(payload, 'secretKey');
res.status(200).send({token});

---------------
** const Token = authHeader && authHeader.split(' ')[1];
returns undefined || splittedValue;
** require('crypto').randomBytes(64).toString('hex') >> generates secret key for .env;
---------------

*Storing Token:
---------------
localStorage.setItem('token', res.token);
this.router.navigate(['/events']);

*CanActivate:
------------
auth.service => loggedIn(){ return !!localStorage.getItem('token'); }
auth.guard => canActivate():boolean{
    if(this.authService.loggedIn()){
      return true;
    } else {
      this.router.navigate(['/login']);
      return false;
    }
  }
routing => {path: 'specialevents', component: SpecialeventsComponent, canActivate: [AuthGuard]},

*Interceptor:
-------------
app.module => {
    provide: HTTP_INTERCEPTORS,
    useClass: TokenInterceptorService,
    multi: true
  }

token-interceptor.service => 
export class TokenInterceptorService implements HttpInterceptor {
  constructor(private injector: Injector) { }
  intercept(req, next){
    let tokenizedReq = req.clone({
      setHeaders:{
        //Authorization: 'Bearer xx.yy.zz',
        Authorization: `Bearer ${localStorage.getItem('token')}`
      }
    })
    return next.handle(tokenizedReq);
  }
}

*Verify:
-------
Db => function verifyToken(req, res, next){
    if(!req.headers.authorization){
        return res.status(401).send('unauthorized request');
    }
    let token = req.headers.authorization.split(' ')[1];    
    if(token === 'null'){
        return res.status(401).send('unauthorized request');
    }    
    let payload = jwt.verify(token, 'secretKey');
    if(!payload){
        return res.status(401).send('unauthorized request');
    }
    req.userId = payload.subject;
    next();
}
router.get('/specialevents', verifyToken, (req, res) => { }
jwt creates token with payload and send token as status;
store the token as local storage;
in auth service canActivate method checks the token existance and give access as true or false;
httpinterceptor clones the reqest and create the bearer token;
verify funciton will check the available bearer token with payload and return the access
--------------- END ---------------
.send
.status
.sendStatus
.redirect
.render
.download
========================================================================
routing;
middleware;

request & its elements;
respons & its elements;
query string;
status codes;
dynamic routing;
jwt;
cors;
npm i;
package.json in detail;
api headers;
event listeners;
eventEmitters;








