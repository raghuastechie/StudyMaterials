points:
*	in class, variables (let, const & var) are not allowed for propoerties;(Allowed not in class)
*	in class, variables should declare inside the funcion.
*	if variables declared for Object or in the iteratoin of obj, Object will print else will print [object Object];

Functions:
*	if function expression has been stored in a variable, the variable can be used as a function. Those functions are always invoked using the variable name.
*	Function expressions can be made "self-invoking". A self-invoking expression is invoked automatically, without being called.
*	JavaScript functions can be used as values. ex: let x = myFunction(4, 3) * 2;
*	A function defined as the property of an object, is called a method to the object. A function designed to create new objects, is called an object constructor.
*	The toString() method returns the function as a string.
*	Arrow functions are not hoisted. They must be defined before they are used.
**	Function parameters are the names listed in the function definition. Function arguments are the real values passed to (and received by) the function.
*	Parameter Rules: JavaScript function definitions do not specify data types for parameters, do not perform type checking on the passed arguments & do not check the number of arguments received. 
*	If a function is called with missing arguments (less than declared), the missing values are set to undefined. Sometimes this is acceptable, but sometimes it is better to assign a default value to the parameter.
*	Function Rest Parameter: The rest parameter (...) allows a function to treat an indefinite number of arguments as an array. 
ex: f sum(...args) => {foreach(args)...}; sum(1,3,4,5,7);
*	JavaScript functions have a built-in object called the arguments object. The argument object contains an array of the arguments used when the function was called (invoked).
ex: console.log(arguments[0]) >> in function;
*	Arguments are Passed by Value: The parameters, in a function call, are the function's arguments.The function only gets to know the values, not the argument's locations. If a function changes an argument's value, it does not change the parameter's original value. 
Changes to arguments are not visible (reflected) outside the function.
*	Objects are Passed by Reference: In JavaScript, object references are values. Because of this, objects will behave like they are passed by reference. If a function changes an object property, it changes the original value. Changes to object properties are visible (reflected) outside the function.
*	myFunction() and window.myFunction() is the same function.
*	this is not a variable. It is a keyword. You cannot change the value of this. In a web browser the global object is the browser window.
*	If a function invocation is preceded with the new keyword, it is a constructor invocation. it is like creating a new object. If a function is not a method of a JavaScript object, it is a function of the global object (see previous chapter).
*	call() >> Calls a method of an object, substituting another object for the current object. 
ex: const person = { fullName: () => {return this.firstName + " " + this.lastName;}} let x = person.fullName.call(person2); console.log(x);
*	The call() method takes arguments separately. The apply() method takes arguments as an array.
*	With the bind() method, an object can borrow a method from another object.
ex: const person = {firstName:"John", lastName: "Doe", fullName: () => {return this.firstName + " " + this.lastName;}}
const member = {firstName:"Hege", lastName: "Nilsen"}
let fullName = person.fullName.bind(member); console.log(person); console.log(member);
*	class > constructor > methods;
*	super > inheritance > getter&setter;
*	static

*	A primitive value is a value that has no properties or methods. A primitive data type is data that has a primitive value. string; number; boolean; null; undefined; symbol; bigint
*	Object: A JavaScript object is a collection of named values; The named values, in JavaScript objects, are called properties.
*	Methods: Methods are actions that can be performed on objects. Object properties can be both primitive values, other objects, and functions.

*	Literals represent values in JavaScript. These are fixed values—not variables—that you literally provide in your script.
*	Creating a JavaScript Object: Create a single object, using an object literal. Create a single object, with the keyword new. Define an object constructor, and then create objects of the constructed type. Create an object using Object.create().
*	Easiest way to create a Object: Using an object literal.
ex:	const person = {firstName:"John"}; 
	const person = {};
	person.firstName = "John";
	const person = new Object();
	person.firstName = "John";
*	Accessing Properties: person.age; person["age"]; x = "age"; person[x]; loop: for (let x in person) {  txt += person[x] };
*	The DELETE keyword deletes both the value of the property and the property itself and it designed to be used on object properties. It has no effect on variables or functions.
*	






















Encryption:
-----------
const bcrypt = require('bcrypt');
    const keyvalue = await bcrypt.hash('raghunadh', 12);
    console.log(keyvalue);
    const ItsValue = await bcrypt.compare('raghunad', keyvalue);
    console.log(ItsValue);


function createUser();
function getUser();

callback Syntax: createUser({...}, getUser());
promise: createUser({...}).then(getUser).catch(Err);
async: (await createUser({...}), getUser());

CallBacks:
----------
function getUsers(){....};
function setUsers(x, callback){
	x.value;
	callback();
};
setUsers({..}, getUsers);

Promises:
---------
function errMsg(){...};
setUsers(x){
return new Promise((resolve, reject) => {
	!Err ? resolve() : reject();
});}
setUsers(a).then(getUsers).catch(errMsg);


==============================================================
document.write(`${fname} ${lname}`); >> Raghunadh
for(let c OF fname){ document.write(`${c}<br/>`);} >> RAGHU
for(let c IN fname){ document.write(`${c}<br/>`);} >> 01234
==============================================================


function getSum(n1 = 1, n2 = 2){
    document.write(`${n1} + ${n2} = ${n1 + n2} <br/>`); 
    document.write(`${arguments[0]} + ${arguments[1]}<br/>`) 
}
getSum(3);
getSum(3,5);
==============================================================


let dif = (n1, n2) => {
    document.write(`${n1} - ${n2} = ${n1-n2}`);
}
dif(5,3);
==============================================================


let multp = (n1, n2) => {
    let pro = n1 * n2;
    document.write(`${n1} * ${n2} = ${pro}`);
}
multp(15,15);
==============================================================


function CreateProfile(PetName, OwnerName){
    return{
        PetName,
        OwnerName,
        getInfo(){
            return `${this.PetName} is owned by ${this.OwnerName}`;
        }
    };
}
let spot = CreateProfile("Blacky", "Raghunadh");
document.write(`${spot.getInfo()}`);
==============================================================


	indexOf('feb'); >> console.log(months.indexOf('feb',2));
	const color = x ? 'red': 'blue';
	const todo = (n) => console.log("This is: " + n);
==============================================================


**...vals: means passing any array;
function getMore(...vals){
    let sum = 0;
    for(let i = 0; i < vals.length; i++)  sum += vals[i];
    console.log(`sum of getMore(...vals): ${sum}`);
}
getMore(1,2,3, ...nms, ...[5, 6]);
==============================================================


**iteration with for loop:
for(let i = 0; i < bros.length; i++) console.log(bros[i].name)
==============================================================


**iteration with for loop:
for(let bro of bros) console.log(bro.name)
==============================================================


**splice: (index 2 insert, delete_count, {obj 2 insert})
bros.splice(3,0,{sno: 'forth', name: 'bhuvana'});
console.log(bros);
==============================================================


**reduce/reduceRight: pick the element and transfer to previous value (a);
const nms = [1,2,3,4];
let re = nms.reduce((a, b) => a+b);	console.log(re);
==============================================================


**Object.entries: iteration fields of object [key, value]:
for (const [key, value] of Object.entries(sampleObj)){        
    if(key.includes('.Target') && value != '' && typeof(value) === "string")
       sampleObj[key] = parseInt(value);    }
==============================================================


**keys:
const keys = bros.keys();
for(let key of keys) console.log(`${key}: ${bros[key].name}`)
==============================================================


**Filter:
const a = nms.filter(a => a > 2);
==============================================================


**Find && FindIndex:
const alphs = ['A', 'B', 'C', 'D', 'E']; 
let resFind = alphs.find(a => a == 'E'); console.log(resFind);
let resFindIndex = alphs.findIndex(a => a == 'C'); console.log(resFindIndex);
==============================================================


**every: apply the logic for every element in the array. If 
satisfies returns the 'true' else 'false'.
const nms = [1,2,3,4];
let reslt = nms.every(a => a > 1); console.log(reslt);
==============================================================


**reverse: bros.reverse(); console.log(bros);
==============================================================


shift()	>> 	removes the first element of the array;
unshift()	>>	adds @ beginning;
pop() 	>> 	pop() returns the element it removed;
push() 	>> 	adding @last;
==============================================================


**Array.from(): returns iterable array from String/Object;
let a = Array.from('ABCDE'); 	console.log(a); >> [ 'A', 'B', 'C', 'D', 'E' ]
==============================================================
==============================================================


**join(',');
console.log(alphs.join(';'));
==============================================================


**map(c => c);
const alphs = ['A', 'B', 'C', 'D', 'E'];
let p = alphs.map(a => a == 'A' ? `${a} for Apple`: `${a} for -`)
console.log(p);
==============================================================


**foreach((c, index) => console.log(c.text));
const alphs = ['A', 'B', 'C', 'D', 'E']; const nms = [1,2,3,4];
let retString;
alphs.forEach((a,b) => {
    nms.forEach((x,y) => {
        if(b == y){
            if(retString){
                retString = retString + `${a + x + ','}`;
            }else{
                retString = `${a + x + ','}`;
            }
        } 
    })
})
console.log(retString);//A1,B2,C3,D4,
==============================================================


Math.round(x) 	>>	nearest integer;
Math.ceil(x)	>>	nearest UP integer;
Math.floor(x) 	>>	nearest DOWN integer;
Math.trunc(x) 	>>	part of integer;
==============================================================


parseInt(a) >> parses the string to int




*segregating Duplicates or removing duplicates:
==============================================================
let rawArray = [2,1,3,2,6,4,7,5,4,6];
let doops = [], uniqueArray = [], withoutdoops = [];

let b = rawArray.filter((e, i, a) => a.findIndex(x => x == e) != i ? doops.push(e) : withoutdoops.push(e));

uniqueArray = rawArray.filter(a => doops.findIndex(x => x == a) == -1 ? a: '')

console.log(`vls: ${rawArray}`);
console.log(`uniqueArray: ${uniqueArray}`);
console.log(`doops: ${doops}`);
console.log(`withoutdoops: ${withoutdoops}`);

==============================================================

finding lower & higher value:
------------------
const nms = [8,2,3,4,9,0.8,2, 5,9.3];
let smallValue = nms.reduce((a,b) => a < b ? a = a : a = b)
let bigValue = nms.reduce((a,b) => a > b ? a = a : a = b)
console.log(`smallValue: ${smallValue}`);
console.log(`bigValue: ${bigValue}`);
==============================================================

*Finding Small & Big Values:
---------------------------
smallValue 	>>>	let sml = vls.reduce((a, b) => a > b ? a = b : a = a);

bigValue		>>>	let bg = vls.reduce((a, b) => a < b ? a = b : a = a);

sumValue		>>>	vls.reduce((a, b) => a + b);



*Templates for Practicing:
--------------------------

let person = {name: 'raghunadh', age: 38, location: 'hayathnagar'};

let intValues = [2,5,1,3,5,7,8,9,7,6,4];
let serialValues = [1,2,3,4,5,6,7,8,9];
let serialAlphas = ['A', 'B', 'C', 'D', 'F'];
==============================================================
*delete persons[0].age >> delete property of Object;


*[object Object] >> JSON.stringify(obj);

*find (Not found anu value) >> returns undefined; 
	if found criterial, found value will return;

*filter(not found any vlaue) >> returns undefined;
	if found criteria, return js objecct [object Object];
==============================================================

res.send('hi');
res.sendStatus(200);
res.status(200).send('hi');
res.status(200).json({m: 'er'});

res.json({m: 'er'});
res.download('server.js');
res.render('index');


const path = require('path');
path.basename('test.json'); >> test.json;
path.dirname('tutorial/test.json'); >> 'tutorial';
path.isAbsolute('tutorial/test.json') >> false;
path.isAbsolute('c:/tutorial/test.json') >> true;
let dir = 'tuto';
file = path.join('c:', 'users/raghu', dir, test.json); >> pathwill come; '/' will be auto;

path.parse('tuto/test.txt'); >> will provide object;

path.resolve('tuto/test.txt'); >> absolte path;

==============================================================

async function print(){
    console.log(1);
    await sleep(2000);
    console.log(2);
    await sleep(2000);
    console.log(3);
    await sleep(2000);
    console.log(4);
    await sleep(2000);
    console.log(5);
}

print();
function sleep(ms){
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve();
        }, ms)
    })
}

Template literals (Template strings):
`string text ${expression} string text`